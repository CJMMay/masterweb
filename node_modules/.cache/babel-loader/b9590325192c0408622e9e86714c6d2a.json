{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\admin\\\\Desktop\\\\test\\\\project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _objectWithoutProperties from \"C:\\\\Users\\\\admin\\\\Desktop\\\\test\\\\project\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\admin\\\\Desktop\\\\test\\\\project\\\\src\\\\component\\\\table.js\";\nimport React from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form } from 'antd';\nconst data = [];\n\nfor (let i = 0; i < 100; i++) {\n  data.push({\n    key: i.toString(),\n    username: 'chenjiamei',\n    email: '1029187145@qq.com',\n    testYear: '2020',\n    goalSchool: '杭州师范大学',\n    register_time: '2019-1-1',\n    personal: '这个人很懒，没有个性签名'\n  });\n}\n\nconst EditableContext = React.createContext();\n\nclass EditableCell extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getInput = () => {\n      if (this.props.inputType === 'number') {\n        return React.createElement(InputNumber, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      });\n    };\n\n    this.renderCell = ({\n      getFieldDecorator\n    }) => {\n      const _this$props = this.props,\n            editing = _this$props.editing,\n            dataIndex = _this$props.dataIndex,\n            title = _this$props.title,\n            inputType = _this$props.inputType,\n            record = _this$props.record,\n            index = _this$props.index,\n            children = _this$props.children,\n            restProps = _objectWithoutProperties(_this$props, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      return React.createElement(\"td\", Object.assign({}, restProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37\n        },\n        __self: this\n      }), editing ? React.createElement(Form.Item, {\n        style: {\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }],\n        initialValue: record[dataIndex]\n      })(this.getInput())) : children);\n    };\n  }\n\n  render() {\n    return React.createElement(EditableContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, this.renderCell);\n  }\n\n}\n\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.isEditing = record => record.key === this.state.editingKey;\n\n    this.cancel = () => {\n      this.setState({\n        editingKey: ''\n      });\n    };\n\n    this.state = {\n      data,\n      editingKey: ''\n    };\n    this.columns = [{\n      title: '用户头像',\n      dataIndex: 'userimg',\n      key: 'userimg',\n      render: () => React.createElement(\"img\", {\n        src: require(\"./img/userimg.jpg\"),\n        alt: \"\",\n        className: \"userimg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }),\n      editable: true\n    }, {\n      title: '用户名',\n      dataIndex: 'username',\n      key: 'username',\n      sorter: (a, b) => a.username.length - b.username.length,\n      sortDirections: ['descend'],\n      render: text => React.createElement(\"a\", {\n        href: \"javascript:;\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, text),\n      width: '15%',\n      editable: true\n    }, {\n      title: '邮箱',\n      dataIndex: 'email',\n      key: 'email',\n      width: '15%',\n      editable: true\n    }, {\n      title: '考试年份',\n      dataIndex: 'testYear',\n      key: 'testYear',\n      editable: true,\n      width: '20%'\n    }, {\n      title: '目标院校',\n      dataIndex: 'goalSchool',\n      key: 'goalSchool',\n      editable: true\n    }, {\n      title: '注册时间',\n      dataIndex: 'register_time',\n      key: 'register_time',\n      editable: false\n    }, {\n      title: '个性签名',\n      dataIndex: 'personal',\n      key: 'personal'\n    }, {\n      title: '操作',\n      dataIndex: 'operation',\n      key: 'operation',\n      render: (text, record) => {\n        const editingKey = this.state.editingKey;\n        const editable = this.isEditing(record);\n        return editable ? React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 123\n          },\n          __self: this\n        }, React.createElement(EditableContext.Consumer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, form => React.createElement(\"a\", {\n          href: \"javascript:;\",\n          onClick: () => this.save(form, record.key),\n          style: {\n            marginRight: 8\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, \"\\u4FDD\\u5B58\")), React.createElement(Popconfirm, {\n          title: \"\\u662F\\u5426\\u53D6\\u6D88?\",\n          onConfirm: () => this.cancel(record.key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, \"\\u53D6\\u6D88\"))) : React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          disabled: editingKey !== '',\n          onClick: () => this.edit(record.key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, \"\\u4FEE\\u6539\\u4FE1\\u606F\"), React.createElement(\"span\", {\n          disabled: editingKey !== '',\n          className: \"delete\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \"\\u5220\\u9664\"));\n      }\n    }];\n  }\n\n  save(form, key) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n\n      const newData = [...this.state.data];\n      const index = newData.findIndex(item => key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, _objectSpread({}, item, row));\n        this.setState({\n          data: newData,\n          editingKey: ''\n        });\n      } else {\n        newData.push(row);\n        this.setState({\n          data: newData,\n          editingKey: ''\n        });\n      }\n    });\n  }\n\n  edit(key) {\n    this.setState({\n      editingKey: key\n    });\n  }\n\n  render() {\n    const components = {\n      body: {\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          inputType: 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      });\n    });\n    return React.createElement(EditableContext.Provider, {\n      value: this.props.form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }, React.createElement(Table, {\n      components: components,\n      bordered: true,\n      dataSource: this.state.data,\n      columns: columns,\n      rowClassName: \"editable-row\",\n      pagination: {\n        onChange: this.cancel\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default Form.create()(EditableTable);","map":{"version":3,"sources":["C:\\Users\\admin\\Desktop\\test\\project\\src\\component\\table.js"],"names":["React","Table","Input","InputNumber","Popconfirm","Form","data","i","push","key","toString","username","email","testYear","goalSchool","register_time","personal","EditableContext","createContext","EditableCell","Component","getInput","props","inputType","renderCell","getFieldDecorator","editing","dataIndex","title","record","index","children","restProps","margin","rules","required","message","initialValue","render","EditableTable","constructor","isEditing","state","editingKey","cancel","setState","columns","require","editable","sorter","a","b","length","sortDirections","text","width","form","save","marginRight","edit","validateFields","error","row","newData","findIndex","item","splice","components","body","cell","map","col","onCell","onChange","create"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport  { Table, Input, InputNumber, Popconfirm, Form } from  'antd';\r\nconst data = [];\r\nfor (let i = 0; i < 100; i++) {\r\n    data.push({\r\n        key: i.toString(),\r\n        username: 'chenjiamei',\r\n        email: '1029187145@qq.com',\r\n        testYear: '2020',\r\n        goalSchool: '杭州师范大学',\r\n        register_time: '2019-1-1',\r\n        personal: '这个人很懒，没有个性签名',\r\n    });\r\n}\r\nconst EditableContext = React.createContext();\r\n\r\nclass EditableCell extends React.Component {\r\n    getInput = () => {\r\n        if (this.props.inputType === 'number') {\r\n            return <InputNumber />;\r\n        }\r\n        return <Input />;\r\n    };\r\n\r\n    renderCell = ({ getFieldDecorator }) => {\r\n        const {\r\n            editing,\r\n            dataIndex,\r\n            title,\r\n            inputType,\r\n            record,\r\n            index,\r\n            children,\r\n            ...restProps\r\n        } = this.props;\r\n        return (\r\n            <td {...restProps}>\r\n                {editing ? (\r\n                    <Form.Item style={{ margin: 0 }}>\r\n                        {getFieldDecorator(dataIndex, {\r\n                            rules: [\r\n                                {\r\n                                    required: true,\r\n                                    message: `Please Input ${title}!`,\r\n                                },\r\n                            ],\r\n                            initialValue: record[dataIndex],\r\n                        })(this.getInput())}\r\n                    </Form.Item>\r\n                ) : (\r\n                        children\r\n                    )}\r\n            </td>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>;\r\n    }\r\n}\r\n\r\nclass EditableTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { data, editingKey: '' };\r\n        this.columns = [\r\n            {\r\n                title: '用户头像',\r\n                dataIndex: 'userimg',\r\n                key: 'userimg',\r\n                render: () => <img src={require(\"./img/userimg.jpg\")} alt=\"\" className='userimg' />,\r\n                editable: true,\r\n            },\r\n            {\r\n                title: '用户名',\r\n                dataIndex: 'username',\r\n                key: 'username',\r\n                sorter: (a, b) => a.username.length - b.username.length,\r\n                sortDirections: ['descend'],\r\n                render: text => <a href=\"javascript:;\">{text}</a>,\r\n                width: '15%',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: '邮箱',\r\n                dataIndex: 'email',\r\n                key: 'email',\r\n                width: '15%',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: '考试年份',\r\n                dataIndex: 'testYear',\r\n                key: 'testYear',\r\n                editable: true,\r\n                width: '20%',\r\n            },\r\n            {\r\n                title: '目标院校',\r\n                dataIndex: 'goalSchool',\r\n                key: 'goalSchool',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: '注册时间',\r\n                dataIndex: 'register_time',\r\n                key: 'register_time',\r\n                editable: false,\r\n            },\r\n            {\r\n                title: '个性签名',\r\n                dataIndex: 'personal',\r\n                key: 'personal',\r\n            },\r\n            {\r\n                title: '操作',\r\n                dataIndex: 'operation',\r\n                key:'operation',\r\n                render: (text, record) => {\r\n                    const { editingKey } = this.state;\r\n                    const editable = this.isEditing(record);\r\n                    return editable ? (\r\n                        <span>\r\n                            <EditableContext.Consumer>\r\n                                {form => (\r\n                                    <a\r\n                                        href=\"javascript:;\"\r\n                                        onClick={() => this.save(form, record.key)}\r\n                                        style={{ marginRight: 8 }}\r\n                                    >\r\n                                        保存\r\n                  </a>\r\n                                )}\r\n                            </EditableContext.Consumer>\r\n                            <Popconfirm title=\"是否取消?\" onConfirm={() => this.cancel(record.key)}>\r\n                                <a>取消</a>\r\n                            </Popconfirm>\r\n                        </span>\r\n                    ) : (\r\n                            <div>\r\n                                <span disabled={editingKey !== ''} onClick={() => this.edit(record.key)}>\r\n                                    修改信息\r\n            </span>\r\n                                <span disabled={editingKey !== ''} className='delete'>\r\n                                    删除\r\n           </span>\r\n                            </div>\r\n\r\n                        );\r\n                },\r\n            },\r\n        ];\r\n    }\r\n\r\n    isEditing = record => record.key === this.state.editingKey;\r\n\r\n    cancel = () => {\r\n        this.setState({ editingKey: '' });\r\n    };\r\n\r\n    save(form, key) {\r\n        form.validateFields((error, row) => {\r\n            if (error) {\r\n                return;\r\n            }\r\n            const newData = [...this.state.data];\r\n            const index = newData.findIndex(item => key === item.key);\r\n            if (index > -1) {\r\n                const item = newData[index];\r\n                newData.splice(index, 1, {\r\n                    ...item,\r\n                    ...row,\r\n                });\r\n                this.setState({ data: newData, editingKey: '' });\r\n            } else {\r\n                newData.push(row);\r\n                this.setState({ data: newData, editingKey: '' });\r\n            }\r\n        });\r\n    }\r\n\r\n    edit(key) {\r\n        this.setState({ editingKey: key });\r\n    }\r\n\r\n    render() {\r\n        const components = {\r\n            body: {\r\n                cell: EditableCell,\r\n            },\r\n        };\r\n\r\n        const columns = this.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: 'text',\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n        return (\r\n            <EditableContext.Provider value={this.props.form}>\r\n                <Table\r\n                    components={components}\r\n                    bordered\r\n                    dataSource={this.state.data}\r\n                    columns={columns}\r\n                    rowClassName=\"editable-row\"\r\n                    pagination={{\r\n                        onChange: this.cancel,\r\n                    }}\r\n                />\r\n            </EditableContext.Provider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default  Form.create()(EditableTable)"]},"metadata":{},"sourceType":"module"}